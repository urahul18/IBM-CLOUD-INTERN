const express = require('express');
const cors = require('cors');
const axios = require('axios');
const path = require('path');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// IBM Watson ML configuration
const IBM_WATSON_ML_API_KEY = process.env.IBM_WATSON_ML_API_KEY;
const IBM_WATSON_ML_URL = process.env.IBM_WATSON_ML_URL || 'https://us-south.ml.cloud.ibm.com';
const IBM_WATSON_ML_PROJECT_ID = process.env.IBM_WATSON_ML_PROJECT_ID;

// Fallback recipe generation when IBM Watson ML is not available
function generateFallbackRecipe(ingredients) {
    const ingredientList = ingredients.split(',').map(i => i.trim());
    const recipeName = `Delicious ${ingredientList[0]} Recipe`;
    
    return `# ${recipeName}

## Ingredients:
${ingredientList.map(ingredient => `• 1 cup ${ingredient}`).join('\n')}
• Salt and pepper to taste
• 2 tablespoons olive oil

## Instructions:
1. Prepare all ingredients by washing and chopping as needed.
2. Heat olive oil in a large pan over medium heat.
3. Add ${ingredientList[0]} and cook for 5-7 minutes until tender.
4. Add remaining ingredients: ${ingredientList.slice(1).join(', ')}.
5. Season with salt and pepper to taste.
6. Cook for an additional 10-15 minutes, stirring occasionally.
7. Taste and adjust seasoning as needed.
8. Serve hot and enjoy!

## Cooking Tips:
• Don't overcrowd the pan - cook in batches if necessary
• Taste as you go and adjust seasonings
• Fresh herbs make a great garnish

## Prep Time: 15 minutes
## Cook Time: 20 minutes
## Servings: 4`;
}

class RecipeAgent {
    constructor() {
        this.apiKey = IBM_WATSON_ML_API_KEY;
        this.baseUrl = IBM_WATSON_ML_URL;
        this.projectId = IBM_WATSON_ML_PROJECT_ID;
    }

    async getAccessToken() {
        try {
            console.log('Connecting to IBM Cloud for authentication...');
            const response = await axios.post('https://iam.cloud.ibm.com/identity/token', 
                'grant_type=urn:iam:grant-type:apikey&apikey=' + this.apiKey,
                {
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Accept': 'application/json'
                    }
                }
            );
            console.log('Successfully authenticated with IBM Cloud');
            return response.data.access_token;
        } catch (error) {
            console.error('Error getting access token:', error.response?.data || error.message);
            console.log('Failed to connect to IBM Cloud authentication service');
            throw new Error('Failed to authenticate with IBM Watson ML');
        }
    }

    async generateRecipe(ingredients) {
        // Check if IBM Watson ML credentials are configured
        if (!this.apiKey || !this.projectId) {
            console.log('IBM Watson ML credentials not configured, using fallback recipe generation');
            return generateFallbackRecipe(ingredients);
        }

        try {
            console.log('Fetching access token from IBM Cloud...');
            const accessToken = await this.getAccessToken();
            
            console.log('Preparing recipe generation request...');
            const prompt = `Create a detailed recipe using the following ingredients: ${ingredients}

Please provide:
1. Recipe Name
2. Preparation Time
3. Cooking Time
4. Servings
5. Complete ingredient list with measurements
6. Step-by-step cooking instructions
7. Cooking tips and tricks
8. Possible ingredient substitutions
9. Nutritional highlights

Format the response in a clear, easy-to-follow structure.`;

            const payload = {
                input: prompt,
                parameters: {
                    decoding_method: "greedy",
                    max_new_tokens: 1000,
                    temperature: 0.7,
                    top_p: 0.9,
                    repetition_penalty: 1.1
                },
                model_id: "ibm/granite-13b-chat-v2",
                project_id: this.projectId
            };

            console.log('Sending request to IBM Granite LLM via internet...');
            const response = await axios.post(
                `${this.baseUrl}/ml/v1/text/generation?version=2023-05-29`,
                payload,
                {
                    headers: {
                        'Authorization': `Bearer ${accessToken}`,
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    }
                }
            );

            console.log('Recipe successfully generated by IBM Granite LLM');
            return response.data.results[0].generated_text;
        } catch (error) {
            console.error('Error generating recipe:', error.response?.data || error.message);
           console.log('IBM Watson ML unavailable, using fallback recipe generation');
           return generateFallbackRecipe(ingredients);
        }
    }
}

const recipeAgent = new RecipeAgent();

// Routes
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.post('/generate-recipe', async (req, res) => {
    try {
        const { ingredients } = req.body;
        
        if (!ingredients || !ingredients.trim()) {
            return res.status(400).json({ error: 'Please provide ingredients' });
        }

        console.log(`Generating recipe for ingredients: ${ingredients}`);
        
        const recipe = await recipeAgent.generateRecipe(ingredients);
        
        console.log('Recipe generated successfully');
        
        res.json({
            success: true,
            recipe: recipe,
            ingredients_used: ingredients
        });
    } catch (error) {
        console.error('Recipe generation error:', error);
        
        // Fallback recipe generation
        console.log('Using fallback recipe generation');
        const fallbackRecipe = generateFallbackRecipe(req.body.ingredients || 'mixed vegetables');
        
        res.json({
            success: false,
            recipe: fallbackRecipe,
            ingredients_used: req.body.ingredients || 'mixed vegetables',
            fallback: true
        });
    }
});

app.get('/health', (req, res) => {
    res.json({ status: 'healthy', service: 'Recipe Preparation Agent' });
});

// Start server
app.listen(PORT, () => {
    console.log(`Recipe Preparation Agent running on port ${PORT}`);
    console.log(`Open http://localhost:${PORT} to use the application`);
});